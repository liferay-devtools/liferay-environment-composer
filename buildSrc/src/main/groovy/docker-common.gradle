import com.liferay.docker.workspace.environments.Config
import com.liferay.docker.workspace.environments.Util

ext {
	config = new Config(project)

	fixProductVersion = {
		String productVersion ->

		return Util.fixReleaseKey(productVersion)
	}

	updateGradleLocalProperties = {
		Map<String, String> newProperties ->

		File gradleLocalPropertiesFile = file("gradle-local.properties")

		List<String> seenProperties = []
		List<String> gradleLocalPropertiesLines = []

		if (gradleLocalPropertiesFile.exists()) {
			gradleLocalPropertiesLines = gradleLocalPropertiesFile.readLines().collect {
				String line ->

				String newLine = newProperties.find {
					if (line.startsWith("${it.key}=")) {
						seenProperties.add(it.key)
						return "${it.key}=${it.value}"
					}
				}

				return newLine != null ? newLine : line
			}
		}

		gradleLocalPropertiesFile.withOutputStream {
			BufferedOutputStream outputStream ->

			gradleLocalPropertiesLines.each {
				outputStream << it << "\n"
			}

			newProperties.each {
				if (!seenProperties.contains(it.key)) {
					outputStream << it.key << "=" << it.value << "\n"
				}
			}
		}
	}
}

tasks.register("testFixProductVersion") {
	doLast {
		[
			["dxp-7.4.u36", "dxp-7.4.u36"],
			["dxp-7.4.u36-lts", "dxp-7.4.u36"],
			["dxp-2024.q1.1", "dxp-2024.q1.1"],
			["dxp-2024.q1.1-lts", "dxp-2024.q1.1"],
			["dxp-2025.q1.1", "dxp-2025.q1.1-lts"],
			["dxp-2025.q1.1-lts", "dxp-2025.q1.1-lts"],
			["dxp-2025.q2.1", "dxp-2025.q2.1"],
			["dxp-2025.q2.1-lts", "dxp-2025.q2.1"],
		].each {
			String input = it[0]
			String expected = it[1]

			assert expected == Util.fixReleaseKey(input)
		}
	}
}

tasks.register("runUtilTests") {
	dependsOn ":testFixProductVersion"
}