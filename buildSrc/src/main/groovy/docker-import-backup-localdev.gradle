project.plugins.apply "docker-common"

List<String> SSO_CONFIGS = [".ldap.", ".multi.factor.authentication.", ".saml.", ".openid."]
List<String> PROD_ONLY_CONFIGS = [".liferay.analytics.", ".captcha.", ".content.security.policy.", ".elasticsearch7.", ".k8s."]

Closure<Void> truncateTables = {
    String tableNamePattern, String schema ->

    List<Map<String, String>> tableNames = executeSQLQuery("select TABLE_NAME from information_schema.TABLES WHERE TABLE_SCHEMA = '${schema}' and TABLE_NAME like '${tableNamePattern}' OR TABLE_NAME like '${tableNamePattern.toLowerCase()}'", schema)
    
    tableNames.each {
        executeSQLQuery("truncate table ${it.get("TABLE_NAME")}", schema)
    }
}

Closure<Void> sanitizePortalPreferenceValues = {
    schema, Map<String, String> sanitizedValues ->

    sanitizedValues.each {
        executeSQLQuery("update PortalPreferenceValue set smallValue = '${it.value}' where key_ = '${it.key}'", schema)
    }
}

Closure<Void> clearSingleSignOnConfigurations = {
    String schema ->

	SSO_CONFIGS.each {
		executeSQLQuery("delete from Configuration_ where configurationId like '%${it}%'", schema)
	}

    truncateTables('OpenId%', schema)
    truncateTables('Saml%', schema)

	println "Deleted known problematic single sign on entries from schema ${schema}"
}

Closure<Void> deleteMeantForProductionOnlyConfigurations = {
    String schema ->

    PROD_ONLY_CONFIGS.each {
		executeSQLQuery("delete from Configuration_ where configurationId like '%${it}%'", schema)
    }

    sanitizePortalPreferenceValues(schema, [
        "liferayAnalyticsEndpointURL": "fake://fakeAEU",
        "liferayAnalyticsFaroBackendURL": "fake://fakeFBU",
        "liferayAnalyticsURL": "fake://fakeAU",
    ])

    println "Deleted known Analytics Cloud, Captcha, CSP, Elasticsearch, Kubernetes entries from schema ${schema}"
}

Closure<Void> disableUserObjectValidations = {
    String schema ->

    executeSQLQuery("update ObjectValidationRule set active_ = false where objectDefinitionId in (select objectDefinitionId from ObjectDefinition where externalReferenceCode = 'L_USER')", schema)

    println "Disabled object validation users for User system object in schema ${schema}"
}

Closure<Void> reactivateDisabledUsers = {
    String schema ->

    executeSQLQuery("update User_ set status = 0", schema)

    executeSQLQuery("update User_ set emailAddress = 'liferaydevsecops@liferay.com', screenName='liferaydevsecops', firstName='Liferay', lastName='DevSecOps' where emailAddress = 'test@lxc.app' and screenName = 'test'", schema)

	println "Re-activated all users in schema ${schema}"
}

Closure<Void> replaceUserPasswords = {
    String schema ->

    executeSQLQuery("update User_ set password_ = '${config.liferayUserPassword}', passwordEncrypted = false, passwordReset = false, lockout = false", schema)

	println "Reset all user passwords to '${config.liferayUserPassword}' in schema ${schema}"
}

Closure<Void> sanitizeMailConfigurations = {
    String schema ->

    sanitizePortalPreferenceValues(schema, [
        "mail.session.mail.pop3.host": "fake-pop3-host",
        "mail.session.mail.smtp.host": "fake-smtp-host",
        "mail.session.mail.pop3.user": "fake-pop3-user",
        "mail.session.mail.smtp.user": "fake-stmp-host", 
        "mail.session.mail.pop3.password": "fake-pop3-password",
        "mail.session.mail.smtp.password": "fake-smtp-password",
        "mail.session.mail": "false",
        "pop.server.notifications.enabled": "false",
    ])


    executeSQLQuery("update MBMailingList set inServerName = 'fake-pop3-host', outServerName = 'fake-smtp-host', inPassword = 'fake-pop3-password', outPassword = 'fake-smtp-password', active_ = false", schema)

    println "Sanitized known POP and SMTP configurations in schema ${schema}"
}

Closure<Void> updateVirtualHosts = {
	executeSQLQuery("update VirtualHost set hostname = concat(hostname, '.localhost') where hostname <> 'localhost' and hostname not like '%.localhost'", config.databaseName)

	println "Added .localhost to the end of all virtual host names that were not localhost"
}

Closure<Void> updateDatabaseForLocalDevelopment = {
    forEachCompanyId {
        String companyId, String hostname, String webId, String schema ->

        replaceUserPasswords(schema)
        clearSingleSignOnConfigurations(schema)
        reactivateDisabledUsers(schema)
        disableUserObjectValidations(schema)
        sanitizeMailConfigurations(schema)
        deleteMeantForProductionOnlyConfigurations(schema)
    }

    updateVirtualHosts()
}

tasks.register('updateDatabaseForLocalDevelopment') {
    doFirst {
        updateDatabaseForLocalDevelopment()
    }
}