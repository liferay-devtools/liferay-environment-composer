import com.bmuschko.gradle.docker.tasks.container.DockerCopyFileFromContainer

import com.liferay.docker.workspace.environments.Config

import de.undercouch.gradle.tasks.download.Download

import groovy.json.JsonSlurper

import java.time.format.DateTimeFormatter

plugins {
	id "com.avast.gradle.docker-compose" version "0.17.10"
}

String[] databasePartitioningCompatibleServiceNames = ["mysql", "postgres"]
File projectDir = project.projectDir as File

ext {
	config = new Config(project)
}

gradle.liferayWorkspace {
	dockerImageId = config.liferayDockerImageId
}

boolean useLiferay = config.services.contains("liferay")

boolean useClustering = useLiferay && config.clusterNodes > 0

boolean useWebserver = config.services.contains("webserver")

ConfigurableFileTree dockerComposeFileTree = project.fileTree(projectDir) {
	include "**/service.*.yaml"

	if (useClustering) {
		include "**/clustering.*.yaml"
	}

	if (useLiferay) {
		include "**/liferay.*.yaml"
	}

	if (config.databasePartitioningEnabled) {
		if (!config.services.any {databasePartitioningCompatibleServiceNames.contains(it)}) {
			throw new GradleException("Database partitioning must be used with one of these databases: ${databasePartitioningCompatibleServiceNames}")
		}

		include "**/database-partitioning.*.yaml"
	}
}

List<String> serviceComposeFiles = config.services.collect {
	String serviceName ->

	FileTree matchingFileTree = dockerComposeFileTree.matching {
		include "**/*.${serviceName}.yaml"
	}

	if (matchingFileTree.isEmpty()) {
		List<String> possibleServices = dockerComposeFileTree.findAll{
			it.name.startsWith("service.")
		}.collect {
			it.name.substring("service.".length(), it.name.indexOf(".yaml"))
		}

		throw new GradleException(
			"The service '${serviceName}' does not have a matching service.*.yaml file. Possible services are: ${possibleServices}");
	}

	matchingFileTree.getFiles()
}.flatten().collect {
	projectDir.relativePath(it)
}

config.composeFiles.addAll(serviceComposeFiles)

tasks.register("exportContainerData", DockerCopyFileFromContainer) {
	containerId = "${config.namespace}-data-helper"

	doFirst {
		mkdir hostPath.get()
	}

	hostPath = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
		ofPattern("yyyyMMdd.HHmmss").
		withZone(ZoneId.systemDefault())

		"exported_data/data_${config.namespace}_${formatter.format(Instant.now())}"
	}

	remotePath = "/data/container-data"
}

tasks.register("prepareWebserverConfig", Copy) {
	outputs.upToDateWhen { false }

	String clusterHttpUpstreamConfig = useClustering ? "server liferay-cluster-node:8080;" : ""

	from 'templates/webserver/config'

	include 'default.conf.template'
	rename 'default.conf.template', 'default.conf'

	expand (webserverHostnames: config.webserverHostnames, clusterHttpUpstreamConfig: clusterHttpUpstreamConfig)

	into 'compose-recipes/webserver/build/config'
}

tasks.register("prepareHotfixes", Download) {
	dest project.layout.dir(project.provider {project.file("configs/common/patching")})

	onlyIf {
		!config.hotfixURLs.isEmpty()
	}

	src config.hotfixURLs
}

tasks.register("shareWorkspace", Zip) {
	archiveFileName = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
		ofPattern("yyyyMMdd.HHmmss").
		withZone(ZoneId.systemDefault())

		"workspace_${config.namespace}_${formatter.format(Instant.now())}.zip"
	}

	destinationDirectory = file 'shared_workspaces'

	doLast {
		logger.lifecycle "\nWorkspace zip: ${archiveFile.get()}\n"
	}

	exclude ".gitkeep"
	exclude ".gitignore"
	exclude ".git"
	exclude ".gradle"
	exclude "shared_workspaces"
	exclude {
		it.relativePath.pathString.startsWith("exported_data/") &&
		!it.relativePath.pathString.startsWith(config.dataDirectory)
	}

	from '.'

	include "${config.dataDirectory}/**"
	include "**/*"

	outputs.upToDateWhen {
		false
	}
}

tasks.register("start") {
	dependsOn ":composeUp"
}

tasks.register("stop") {
	dependsOn ":composeDown"
}

clean {
	dependsOn ":cleanPrepareHotfixes"
	dependsOn ":cleanPrepareWebserverConfig"
}

dockerDeploy {
	if (useLiferay) {
		dependsOn ":prepareHotfixes"
	}
}

composeBuild {
	if (useWebserver) {
		dependsOn ":prepareWebserverConfig"
	}
}

composeUp {
	if (useLiferay) {
		dependsOn ":buildDockerImage"
	}

	doFirst {
		println "Using config:\n${config}"
	}

	onlyIf {
		!config.composeFiles.isEmpty()
	}
}

Map<String, String> environmentMap = [:]

environmentMap.put "DATA_DIRECTORY", config.dataDirectory
environmentMap.put "DATABASE_NAME", config.databaseName
environmentMap.put "NAMESPACE", config.namespace

if (useClustering) {
	environmentMap.put "LIFERAY_CLUSTER_NODES", config.clusterNodes
}

if (useLiferay) {
	environmentMap.put "LIFERAY_IMAGE_NAME", config.liferayDockerImageId
}

environmentMap.put("COMPOSE_FILE", config.composeFiles.join(File.pathSeparator))
environmentMap.put("COMPOSE_PROJECT_NAME", config.namespace.toLowerCase())

new File('.env').withOutputStream {
	BufferedOutputStream envFileOutputStream ->

	environmentMap.forEach {
		key, value ->

		envFileOutputStream << key << "=" << value << "\n"
	}
}

dockerCompose {
	// DEBUG: Set to true to print container startup output to the console
	captureContainersOutput = true

	// DEBUG: Uncomment to dump the container logs to a directory for inspection
	// captureContainersOutputToFiles = project.file('containerLogs')

	environment.putAll environmentMap

	projectName = config.namespace

	// DEBUG: Set to false to retain volume data on restart
	removeVolumes = true

	tcpPortsToIgnoreWhenWaiting = [8000, 11311]
	useComposeFiles = config.composeFiles

	// DEBUG: Set to true if container startup is failing
	retainContainersOnStartupFailure = false
}