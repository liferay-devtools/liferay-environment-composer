import com.liferay.docker.workspace.environments.Config

import de.undercouch.gradle.tasks.download.Download

import groovy.json.JsonSlurper

import java.time.format.DateTimeFormatter

plugins {
	id "com.avast.gradle.docker-compose" version "0.17.10"
	id "docker-export-backup"
	id "docker-import-backup"
	id "docker-import-backup-lxc-config"
	id "docker-import-backup-lxc-data"
}

ext {
	config = new Config(project)
}

file('.env').withOutputStream {
	BufferedOutputStream envFileOutputStream ->

	config.environmentMap.forEach {
		key, value ->

		envFileOutputStream << key << "=" << value << "\n"
	}
}

gradle.liferayWorkspace {
	dockerImageId = config.liferayDockerImageId
}

tasks.register("prepareHotfixes", Download) {
	dest project.layout.dir(project.provider {project.file("configs/common/patching")})

	onlyIf {
		!config.hotfixURLs.isEmpty()
	}

	src config.hotfixURLs
}

tasks.register("shareWorkspace", Zip) {
	archiveFileName = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
		ofPattern("yyyyMMdd.HHmmss").
		withZone(ZoneId.systemDefault())

		"workspace_${config.namespace}_${formatter.format(Instant.now())}.zip"
	}

	destinationDirectory = file 'shared_workspaces'

	doLast {
		logger.lifecycle "\nWorkspace zip: ${archiveFile.get()}\n"
	}

	exclude ".gitkeep"
	exclude ".gitignore"
	exclude ".git"
	exclude ".gradle"
	exclude {
		file("lxc").exists() &&
		(it.relativePath.pathString.startsWith("dumps/") || it.relativePath.pathString.startsWith("liferay_data/"))
	}
	exclude "lxc"
	exclude "shared_workspaces"
	exclude {
		it.relativePath.pathString.startsWith("exported_data/") &&
		!it.relativePath.pathString.startsWith(config.dataDirectory)
	}

	from '.'

	include "${config.dataDirectory}/**"
	include "**/*"

	outputs.upToDateWhen {
		false
	}
}

tasks.register("start") {
	dependsOn ":composeUp"
}

tasks.register("stop") {
	dependsOn ":composeDown"
}

clean {
	dependsOn ":cleanPrepareHotfixes"
}

dockerDeploy {
	if (config.useLiferay) {
		dependsOn ":prepareHotfixes"
	}
}

composeUp {
	if (config.useLiferay) {
		dependsOn ":buildDockerImage"
	}

	dependsOn importDatabaseDumps

	doFirst {
		println "Using config:\n${config}"
	}

	onlyIf {
		!config.composeFiles.isEmpty()
	}

	finalizedBy listAdminUsers
}

dockerCompose {
	// DEBUG: Set to true to print container startup output to the console
	captureContainersOutput = false

	// DEBUG: Uncomment to dump the container logs to a directory for inspection
	// captureContainersOutputToFiles = project.file('containerLogs')

	environment.putAll config.environmentMap

	projectName = config.namespace

	// DEBUG: Set to false to retain volume data on restart
	removeVolumes = config.clearVolumeData

	tcpPortsToIgnoreWhenWaiting = [8000, 11311]
	useComposeFiles = config.composeFiles

	// DEBUG: Set to true if container startup is failing
	retainContainersOnStartupFailure = false
}