import com.bmuschko.gradle.docker.tasks.container.DockerCopyFileFromContainer

import groovy.json.JsonSlurper

import java.time.format.DateTimeFormatter

plugins {
	id "com.avast.gradle.docker-compose" version "0.17.10"
	id "docker-common"
	id "docker-liferay-bundle"
}

gradle.liferayWorkspace {
	dockerImageId = config.liferayDockerImageId
}

tasks.register("exportContainerData", DockerCopyFileFromContainer) {
	containerId = "${config.namespace}-data-helper"

	doFirst {
		mkdir hostPath.get()
	}

	hostPath = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
		ofPattern("yyyyMMdd.HHmmss").
		withZone(ZoneId.systemDefault())

		"exported_data/data_${config.namespace}_${formatter.format(Instant.now())}"
	}

	remotePath = "/data/container-data"
}

tasks.register("prepareWebserverConfig", Copy) {
	onlyIf("using a webserver") { config.useWebserver }

	outputs.upToDateWhen { false }

	String clusterHttpUpstreamConfig = config.useClustering ? "server liferay-cluster-node:8080;" : ""

	from 'templates/webserver/config'

	include 'default.conf.template'
	rename 'default.conf.template', 'default.conf'

	expand (webserverHostnames: config.webserverHostnames, clusterHttpUpstreamConfig: clusterHttpUpstreamConfig)

	into 'compose-recipes/webserver/build/config'
}

tasks.register("shareWorkspace", Zip) {
	archiveFileName = provider {
		DateTimeFormatter formatter = DateTimeFormatter.
		ofPattern("yyyyMMdd.HHmmss").
		withZone(ZoneId.systemDefault())

		"workspace_${config.namespace}_${formatter.format(Instant.now())}.zip"
	}

	destinationDirectory = file 'shared_workspaces'

	doLast {
		logger.lifecycle "\nWorkspace zip: ${archiveFile.get()}\n"
	}

	exclude ".gitkeep"
	exclude ".gitignore"
	exclude ".git"
	exclude ".gradle"
	exclude "shared_workspaces"
	exclude {
		it.relativePath.pathString.startsWith("exported_data/") &&
		!it.relativePath.pathString.startsWith(config.dataDirectory)
	}

	from '.'

	include "${config.dataDirectory}/**"
	include "**/*"

	outputs.upToDateWhen {
		false
	}
}

tasks.register("restart") {
	dependsOn ":start"
	dependsOn ":stop"
}

tasks.register("start") {
	dependsOn ":composeUp"
	mustRunAfter ":stop"
}

tasks.register("stop") {
	dependsOn ":composeDown"
}

buildDockerImage {
	onlyIf("using the Liferay service") { config.useLiferay }
}

clean {
	dependsOn ":cleanPrepareHotfixes"
	dependsOn ":cleanPrepareWebserverConfig"
}

dockerDeploy {
	dependsOn ":prepareHotfixes"
}

composeBuild {
	dependsOn ":prepareWebserverConfig"
}

composeUp {
	onlyIf("there are Compose files") { !config.composeFiles.isEmpty() }

	dependsOn ":buildDockerImage"
	dependsOn ":checkForLiferayLicense"

	doFirst {
		println "Using config:\n\n${config}\n\n"
	}

	finalizedBy ":listAdminUsers"
}

Map<String, String> environmentMap = [:]

environmentMap.put "DATA_DIRECTORY", config.dataDirectory
environmentMap.put "DATABASE_NAME", config.databaseName
environmentMap.put "NAMESPACE", config.namespace

if (config.useClustering) {
	environmentMap.put "LIFERAY_CLUSTER_NODES", config.clusterNodes
}

if (config.useLiferay) {
	environmentMap.put "LIFERAY_IMAGE_NAME", config.liferayDockerImageId
}

environmentMap.put("COMPOSE_FILE", config.composeFiles.join(File.pathSeparator))
environmentMap.put("COMPOSE_PROJECT_NAME", config.namespace.toLowerCase())

new File('.env').withOutputStream {
	BufferedOutputStream envFileOutputStream ->

	environmentMap.forEach {
		key, value ->

		envFileOutputStream << key << "=" << value << "\n"
	}
}

dockerCompose {
	// DEBUG: Set to true to print container startup output to the console
	captureContainersOutput = true

	// DEBUG: Uncomment to dump the container logs to a directory for inspection
	// captureContainersOutputToFiles = project.file('containerLogs')

	environment.putAll environmentMap

	projectName = config.namespace

	// DEBUG: Set to false to retain volume data on restart
	removeVolumes = true

	tcpPortsToIgnoreWhenWaiting = [8000, 11311]
	useComposeFiles = config.composeFiles

	// DEBUG: Set to true if container startup is failing
	retainContainersOnStartupFailure = false
}